import React, { createContext, useContext, useState, useEffect } from 'react';

export interface Language {
  code: string;
  name: string;
  nativeName: string;
  flag: string;
}

export const languages: Language[] = [
  { code: 'en', name: 'English', nativeName: 'English', flag: 'üá∫üá∏' },
  { code: 'kn', name: 'Kannada', nativeName: '‡≤ï‡≤®‡≥ç‡≤®‡≤°', flag: 'üáÆüá≥' },
  { code: 'hi', name: 'Hindi', nativeName: '‡§π‡§ø‡§Ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
  { code: 'te', name: 'Telugu', nativeName: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å', flag: 'üáÆüá≥' },
  { code: 'ta', name: 'Tamil', nativeName: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç', flag: 'üáÆüá≥' }
];

interface LanguageContextType {
  currentLanguage: Language;
  setLanguage: (language: Language) => void;
  translate: (text: string) => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};

// Basic translation map for demo purposes
const translations: Record<string, Record<string, string>> = {
  'en': {
    'welcome': 'Welcome',
    'crop_monitor': 'Crop Monitor',
    'disease_check': 'Disease Check',
    'market_price': 'Market Price',
    'gov_schemes': 'Gov Schemes',
    'weather_forecast': 'Weather Daily Forecast',
    'temperature': 'Temperature',
    'humidity': 'Humidity',
    'light_intensity': 'Light Intensity',
    'weather': 'Weather',
    'notifications': 'Notifications',
    'settings': 'Settings',
    'sign_out': 'Sign Out',
    'language': 'Language'
  },
  'kn': {
    'welcome': '‡≤®‡≤Æ‡≤∏‡≥ç‡≤ï‡≤æ‡≤∞',
    'crop_monitor': '‡≤¨‡≥Ü‡≤≥‡≥Ü ‡≤Æ‡≥á‡≤≤‡≥ç‡≤µ‡≤ø‡≤ö‡≤æ‡≤∞‡≤£‡≥Ü',
    'disease_check': '‡≤∞‡≥ã‡≤ó ‡≤™‡≤∞‡≥Ä‡≤ï‡≥ç‡≤∑‡≥Ü',
    'market_price': '‡≤Æ‡≤æ‡≤∞‡≥Å‡≤ï‡≤ü‡≥ç‡≤ü‡≥Ü ‡≤¨‡≥Ü‡≤≤‡≥Ü',
    'gov_schemes': '‡≤∏‡≤∞‡≥ç‡≤ï‡≤æ‡≤∞‡≤ø ‡≤Ø‡≥ã‡≤ú‡≤®‡≥Ü‡≤ó‡≤≥‡≥Å',
    'weather_forecast': '‡≤π‡≤µ‡≤æ‡≤Æ‡≤æ‡≤® ‡≤Æ‡≥Å‡≤®‡≥ç‡≤®‡≥ã‡≤ü',
    'temperature': '‡≤§‡≤æ‡≤™‡≤Æ‡≤æ‡≤®',
    'humidity': '‡≤Ü‡≤∞‡≥ç‡≤¶‡≥ç‡≤∞‡≤§‡≥Ü',
    'light_intensity': '‡≤¨‡≥Ü‡≤≥‡≤ï‡≤ø‡≤® ‡≤§‡≥Ä‡≤µ‡≥ç‡≤∞‡≤§‡≥Ü',
    'weather': '‡≤π‡≤µ‡≤æ‡≤Æ‡≤æ‡≤®',
    'notifications': '‡≤∏‡≥Ç‡≤ö‡≤®‡≥Ü‡≤ó‡≤≥‡≥Å',
    'settings': '‡≤∏‡≥Ü‡≤ü‡≥ç‡≤ü‡≤ø‡≤Ç‡≤ó‡≥ç‡≤ó‡≤≥‡≥Å',
    'sign_out': '‡≤∏‡≥à‡≤®‡≥ç ‡≤î‡≤ü‡≥ç',
    'language': '‡≤≠‡≤æ‡≤∑‡≥Ü'
  },
  'hi': {
    'welcome': '‡§∏‡•ç‡§µ‡§æ‡§ó‡§§',
    'crop_monitor': '‡§´‡§∏‡§≤ ‡§Æ‡•â‡§®‡§ø‡§ü‡§∞',
    'disease_check': '‡§∞‡•ã‡§ó ‡§ú‡§æ‡§Ç‡§ö',
    'market_price': '‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø',
    'gov_schemes': '‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç',
    'weather_forecast': '‡§Æ‡•å‡§∏‡§Æ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§®',
    'temperature': '‡§§‡§æ‡§™‡§Æ‡§æ‡§®',
    'humidity': '‡§®‡§Æ‡•Ä',
    'light_intensity': '‡§™‡•ç‡§∞‡§ï‡§æ‡§∂ ‡§§‡•Ä‡§µ‡•ç‡§∞‡§§‡§æ',
    'weather': '‡§Æ‡•å‡§∏‡§Æ',
    'notifications': '‡§∏‡•Ç‡§ö‡§®‡§æ‡§è‡§Ç',
    'settings': '‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏',
    'sign_out': '‡§∏‡§æ‡§á‡§® ‡§Ü‡§â‡§ü',
    'language': '‡§≠‡§æ‡§∑‡§æ'
  }
};

export const LanguageProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [currentLanguage, setCurrentLanguage] = useState<Language>(languages[0]);

  useEffect(() => {
    const savedLanguage = localStorage.getItem('preferred-language');
    if (savedLanguage) {
      const language = languages.find(lang => lang.code === savedLanguage);
      if (language) {
        setCurrentLanguage(language);
      }
    }
  }, []);

  const setLanguage = (language: Language) => {
    setCurrentLanguage(language);
    localStorage.setItem('preferred-language', language.code);
  };

  const translate = (key: string): string => {
    return translations[currentLanguage.code]?.[key] || translations['en'][key] || key;
  };

  return (
    <LanguageContext.Provider value={{ currentLanguage, setLanguage, translate }}>
      {children}
    </LanguageContext.Provider>
  );
};